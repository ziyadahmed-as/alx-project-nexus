# Generated by Django 5.2.4 on 2025-08-05 07:09

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, help_text='Optional username, defaults to email if not provided', max_length=150, null=True)),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, db_index=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be in format: '+999999999'. Up to 15 digits.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user has verified their email.')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('CUSTOMER', 'Customer'), ('VENDOR', 'Vendor'), ('VENDOR_STAFF', 'Vendor Staff')], db_index=True, default='CUSTOMER', max_length=20)),
                ('last_active', models.DateTimeField(blank=True, help_text='Last time the user was active on the platform', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_type', models.CharField(choices=[('BILLING', 'Billing'), ('SHIPPING', 'Shipping'), ('BUSINESS', 'Business'), ('OTHER', 'Other')], db_index=True, default='SHIPPING', max_length=20)),
                ('recipient_name', models.CharField(blank=True, help_text='Name of the person receiving shipments', max_length=100, null=True)),
                ('company_name', models.CharField(blank=True, help_text='Company name for business addresses', max_length=100, null=True)),
                ('street_address', models.CharField(blank=True, help_text='Primary street address line', max_length=255, null=True, validators=[django.core.validators.RegexValidator(regex='^[A-Za-z0-9\\s,.-]+$')])),
                ('apartment_address', models.CharField(blank=True, help_text='Apartment, suite, or building number', max_length=255, null=True)),
                ('city', models.CharField(help_text='City or locality name', max_length=100)),
                ('state', models.CharField(blank=True, help_text='State, province, or region', max_length=100, null=True, validators=[django.core.validators.RegexValidator(regex='^[A-Za-z\\s]+$')])),
                ('postal_code', models.CharField(db_index=True, help_text='ZIP or postal code', max_length=20)),
                ('country', models.CharField(default='Ethiopia', help_text='Country name', max_length=100)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number for delivery', max_length=20, null=True, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('is_default', models.BooleanField(db_index=True, default=False, help_text='Set as default address for this type')),
                ('location_coordinates', models.CharField(blank=True, help_text='Latitude,Longitude for mapping', max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='admin_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('department', models.CharField(choices=[('IT', 'Information Technology'), ('FINANCE', 'Finance'), ('OPERATIONS', 'Operations'), ('MARKETING', 'Marketing'), ('SALES', 'Sales'), ('SUPPORT', 'Customer Support')], db_index=True, max_length=20)),
                ('position', models.CharField(help_text='Job title or position in the organization', max_length=100)),
                ('access_level', models.PositiveIntegerField(db_index=True, default=1, help_text='Numerical representation of access privileges')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the admin', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Admin Profile',
                'verbose_name_plural': 'Admin Profiles',
                'ordering': ['department', '-access_level'],
                'indexes': [models.Index(fields=['department', 'access_level'], name='admin_dept_access_idx')],
            },
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='customer_profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('date_of_birth', models.DateField(blank=True, help_text="Customer's date of birth", null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture for the customer', null=True, upload_to='customer_profiles/')),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('fr', 'French'), ('es', 'Spanish')], default='en', help_text='Preferred language for communication', max_length=10)),
                ('newsletter_subscription', models.BooleanField(db_index=True, default=False, help_text='Whether the customer subscribes to newsletters')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Customer Profile',
                'verbose_name_plural': 'Customer Profiles',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user'], name='customer_user_idx'), models.Index(fields=['newsletter_subscription'], name='customer_newsletter_idx')],
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='vendor', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('company_registration_number', models.CharField(db_index=True, help_text='Official company registration number', max_length=100, unique=True)),
                ('business_type', models.CharField(choices=[('RETAIL', 'Retail'), ('WHOLESALE', 'Wholesale'), ('SERVICE', 'Service'), ('MANUFACTURING', 'Manufacturing'), ('OTHER', 'Other')], db_index=True, default='RETAIL', max_length=50)),
                ('verification_status', models.CharField(choices=[('PENDING', 'Pending'), ('VERIFIED', 'Verified'), ('REJECTED', 'Rejected'), ('SUSPENDED', 'Suspended')], db_index=True, default='PENDING', max_length=20)),
                ('tax_identification_number', models.CharField(db_index=True, help_text='Tax ID number for the business', max_length=100, unique=True)),
                ('business_email', models.EmailField(db_index=True, help_text='Official business email address', max_length=254, unique=True)),
                ('business_phone', models.CharField(help_text='Official business phone number', max_length=20, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('years_in_business', models.PositiveIntegerField(default=0, help_text='Number of years the business has been operating')),
                ('accepted_terms', models.BooleanField(default=False, help_text='Whether the vendor accepted terms and conditions')),
                ('terms_accepted_date', models.DateTimeField(blank=True, help_text='Date when terms were accepted', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Vendor',
                'verbose_name_plural': 'Vendors',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['business_type', 'verification_status'], name='vendor_type_status_idx'), models.Index(fields=['company_registration_number'], name='vendor_reg_num_idx'), models.Index(fields=['business_email'], name='vendor_business_email_idx')],
                'constraints': [models.UniqueConstraint(fields=('tax_identification_number',), name='unique_vendor_tax_id'), models.UniqueConstraint(fields=('business_email',), name='unique_vendor_business_email')],
            },
        ),
        migrations.CreateModel(
            name='VendorEmployee',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='vendor_employee', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('employee_id', models.CharField(help_text='Internal employee ID', max_length=50, unique=True)),
                ('role', models.CharField(choices=[('MANAGER', 'Manager'), ('STAFF', 'Staff'), ('DELIVERY', 'Delivery'), ('CUSTOMER_SERVICE', 'Customer Service')], db_index=True, default='STAFF', max_length=20)),
                ('department', models.CharField(blank=True, help_text='Department within the vendor organization', max_length=100, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether the employee is currently active')),
                ('hire_date', models.DateField(db_index=True, help_text='Date when employee was hired')),
                ('termination_date', models.DateField(blank=True, help_text='Date when employment was terminated', null=True)),
                ('permissions', models.JSONField(default=dict, help_text='JSON structure defining employee permissions')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='Users.vendor')),
            ],
            options={
                'verbose_name': 'Vendor Employee',
                'verbose_name_plural': 'Vendor Employees',
                'ordering': ['vendor', '-hire_date'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='user_email_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role', 'is_verified'], name='user_role_verified_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_active'], name='user_last_active_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('email',), name='unique_user_email'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['user', 'is_default'], name='user_default_address_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['postal_code'], name='address_postal_code_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['address_type'], name='address_type_idx'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('user', 'address_type'), name='unique_default_address_per_type'),
        ),
        migrations.AddIndex(
            model_name='vendoremployee',
            index=models.Index(fields=['vendor', 'is_active'], name='vendor_employee_active_idx'),
        ),
        migrations.AddIndex(
            model_name='vendoremployee',
            index=models.Index(fields=['role', 'is_active'], name='employee_role_active_idx'),
        ),
        migrations.AddConstraint(
            model_name='vendoremployee',
            constraint=models.UniqueConstraint(fields=('employee_id',), name='unique_employee_id'),
        ),
    ]
